# -*- coding: utf-8 -*-
# (C) Copyright IBM Corp. 2021.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Integration Tests for VulnerabilityAdvisorV3
"""

import os
import pytest
from ibm_cloud_sdk_core import *
from ibm_container_registry.vulnerability_advisor_v3 import *

account = 'testString'
accept_language = 'testString'

# Config file name
config_file = 'vulnerability_advisor_v3.env'

class TestVulnerabilityAdvisorV3():
    """
    Integration Test Class for VulnerabilityAdvisorV3
    """

    @classmethod
    def setup_class(cls):
        if os.path.exists(config_file):
            os.environ['IBM_CREDENTIALS_FILE'] = config_file

            cls.config = read_external_sources(
                VulnerabilityAdvisorV3.DEFAULT_SERVICE_NAME)
            assert cls.config is not None

            cls.vulnerability_advisor_service = VulnerabilityAdvisorV3.new_instance(
                account=cls.config["ACCOUNT_ID"]
                )
            assert cls.vulnerability_advisor_service is not None

            cls.dns_name = cls.config["URL"]
            assert cls.dns_name is not None
            if cls.dns_name.startswith("https://"):
                cls.dns_name = cls.dns_name[len("https://"):]

        print('Setup complete.')

    needscredentials = pytest.mark.skipif(
        not os.path.exists(config_file), reason="External configuration not available, skipping..."
    )

    @needscredentials
    def test_account_report_query_path(self):

        account_report_query_path_response = self.vulnerability_advisor_service.account_report_query_path(
            include_private='true'
        )

        assert account_report_query_path_response.get_status_code() == 200
        scan_report_list = account_report_query_path_response.get_result()
        assert scan_report_list is not None

    @needscredentials
    def test_account_status_query_path(self):

        account_status_query_path_response = self.vulnerability_advisor_service.account_status_query_path(
            include_private='true'
        )

        assert account_status_query_path_response.get_status_code() == 200
        scanreport_image_summary_list = account_status_query_path_response.get_result()
        assert scanreport_image_summary_list is not None

    @needscredentials
    def test_image_report_query_path(self):

        image_report_query_path_response = self.vulnerability_advisor_service.image_report_query_path(
            name=self.dns_name+"/"+self.config["SEED_IMAGE"]
        )

        assert image_report_query_path_response.get_status_code() == 200
        scan_report = image_report_query_path_response.get_result()
        assert scan_report is not None

    @needscredentials
    def test_image_status_query_path(self):

        image_status_query_path_response = self.vulnerability_advisor_service.image_status_query_path(
            name=self.dns_name+"/"+self.config["SEED_IMAGE"]
        )

        assert image_status_query_path_response.get_status_code() == 200
        scanreport_summary = image_status_query_path_response.get_result()
        assert scanreport_summary is not None

    @needscredentials
    def test_create_exemption_account(self):

        create_exemption_account_response = self.vulnerability_advisor_service.create_exemption_account(
            issue_type='cve',
            issue_id='CVE-2020-0001'
        )

        assert create_exemption_account_response.get_status_code() == 201
        exemption = create_exemption_account_response.get_result()
        assert exemption is not None

    @needscredentials
    def test_list_exemption_account(self):

        list_exemption_account_response = self.vulnerability_advisor_service.list_exemption_account()

        assert list_exemption_account_response.get_status_code() == 200
        list_exemption = list_exemption_account_response.get_result()
        assert list_exemption is not None

    @needscredentials
    def test_get_exemption_account(self):

        get_exemption_account_response = self.vulnerability_advisor_service.get_exemption_account(
            issue_type='cve',
            issue_id='CVE-2020-0001'
        )

        assert get_exemption_account_response.get_status_code() == 200
        exemption = get_exemption_account_response.get_result()
        assert exemption is not None

    @needscredentials
    def test_delete_exemption_account(self):

        delete_exemption_account_response = self.vulnerability_advisor_service.delete_exemption_account(
            issue_type='cve',
            issue_id='CVE-2020-0001'
        )

        assert delete_exemption_account_response.get_status_code() == 200

    @needscredentials
    def test_create_exemption_resource(self):

        create_exemption_resource_response = self.vulnerability_advisor_service.create_exemption_resource(
            resource=self.dns_name+"/"+self.config["SEED_IMAGE"],
            issue_type='cve',
            issue_id='CVE-2020-0001'
        )

        assert create_exemption_resource_response.get_status_code() == 201
        exemption = create_exemption_resource_response.get_result()
        assert exemption is not None

    @needscredentials
    def test_list_exemption_resource(self):

        list_exemption_resource_response = self.vulnerability_advisor_service.list_exemption_resource(
            resource=self.dns_name+"/"+self.config["SEED_IMAGE"]
        )

        assert list_exemption_resource_response.get_status_code() == 200
        list_exemption = list_exemption_resource_response.get_result()
        assert list_exemption is not None

    @needscredentials
    def test_list_image_exemptions(self):

        list_image_exemptions_response = self.vulnerability_advisor_service.list_image_exemptions(
            resource=self.dns_name+"/"+self.config["SEED_IMAGE"],
            include_scope=True
        )

        assert list_image_exemptions_response.get_status_code() == 200
        list_exemption = list_image_exemptions_response.get_result()
        assert list_exemption is not None

    @needscredentials
    def test_list_bulk_image_exemptions(self):

        list_bulk_image_exemptions_response = self.vulnerability_advisor_service.list_bulk_image_exemptions(
            body=[self.dns_name+"/"+self.config["SEED_IMAGE"]]
        )

        assert list_bulk_image_exemptions_response.get_status_code() == 200
        result = list_bulk_image_exemptions_response.get_result()
        assert result is not None

    @needscredentials
    def test_list_account_exemptions(self):

        list_account_exemptions_response = self.vulnerability_advisor_service.list_account_exemptions()

        assert list_account_exemptions_response.get_status_code() == 200
        list_exemption = list_account_exemptions_response.get_result()
        assert list_exemption is not None

    @needscredentials
    def test_get_exemption_resource(self):

        get_exemption_resource_response = self.vulnerability_advisor_service.get_exemption_resource(
            resource=self.dns_name+"/"+self.config["SEED_IMAGE"],
            issue_type='cve',
            issue_id='CVE-2020-0001'
        )

        assert get_exemption_resource_response.get_status_code() == 200
        exemption = get_exemption_resource_response.get_result()
        assert exemption is not None

    @needscredentials
    def test_delete_exemption_resource(self):

        delete_exemption_resource_response = self.vulnerability_advisor_service.delete_exemption_resource(
            resource=self.dns_name+"/"+self.config["SEED_IMAGE"],
            issue_type='cve',
            issue_id='CVE-2020-0001'
        )

        assert delete_exemption_resource_response.get_status_code() == 200

    @needscredentials
    def test_exempt_handler(self):

        exempt_handler_response = self.vulnerability_advisor_service.exempt_handler()

        assert exempt_handler_response.get_status_code() == 200
        list_exemption_type_info = exempt_handler_response.get_result()
        assert list_exemption_type_info is not None

    @needscredentials
    def test_exemptions_account_delete_handler(self):

        exemptions_account_delete_handler_response = self.vulnerability_advisor_service.exemptions_account_delete_handler()

        assert exemptions_account_delete_handler_response.get_status_code() == 200
        exemption_deletion_info = exemptions_account_delete_handler_response.get_result()
        assert exemption_deletion_info is not None
