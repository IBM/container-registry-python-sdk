# -*- coding: utf-8 -*-
# (C) Copyright IBM Corp. 2023.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Unit Tests for VulnerabilityAdvisorV4
"""

from ibm_cloud_sdk_core.authenticators.no_auth_authenticator import NoAuthAuthenticator
import inspect
import json
import os
import pytest
import re
import requests
import responses
import urllib
from ibm_container_registry.vulnerability_advisor_v4 import *

accept_language = 'testString'
account = 'testString'

_service = VulnerabilityAdvisorV4(
    authenticator=NoAuthAuthenticator(),
    account=account,
)

_base_url = 'https://icr.io'
_service.set_service_url(_base_url)


def preprocess_url(operation_path: str):
    """
    Returns the request url associated with the specified operation path.
    This will be base_url concatenated with a quoted version of operation_path.
    The returned request URL is used to register the mock response so it needs
    to match the request URL that is formed by the requests library.
    """
    # First, unquote the path since it might have some quoted/escaped characters in it
    # due to how the generator inserts the operation paths into the unit test code.
    operation_path = urllib.parse.unquote(operation_path)

    # Next, quote the path using urllib so that we approximate what will
    # happen during request processing.
    operation_path = urllib.parse.quote(operation_path, safe='/')

    # Finally, form the request URL from the base URL and operation path.
    request_url = _base_url + operation_path

    # If the request url does NOT end with a /, then just return it as-is.
    # Otherwise, return a regular expression that matches one or more trailing /.
    if re.fullmatch('.*/+', request_url) is None:
        return request_url
    else:
        return re.compile(request_url.rstrip('/') + '/+')


def test_get_service_url_for_region():
    """
    get_service_url_for_region()
    """
    assert VulnerabilityAdvisorV4.get_service_url_for_region('INVALID_REGION') is None
    assert VulnerabilityAdvisorV4.get_service_url_for_region('global') == 'https://icr.io'
    assert VulnerabilityAdvisorV4.get_service_url_for_region('us-south') == 'https://us.icr.io'
    assert VulnerabilityAdvisorV4.get_service_url_for_region('uk-south') == 'https://uk.icr.io'
    assert VulnerabilityAdvisorV4.get_service_url_for_region('eu-gb') == 'https://uk.icr.io'
    assert VulnerabilityAdvisorV4.get_service_url_for_region('eu-central') == 'https://de.icr.io'
    assert VulnerabilityAdvisorV4.get_service_url_for_region('eu-de') == 'https://de.icr.io'
    assert VulnerabilityAdvisorV4.get_service_url_for_region('ap-north') == 'https://jp.icr.io'
    assert VulnerabilityAdvisorV4.get_service_url_for_region('jp-tok') == 'https://jp.icr.io'
    assert VulnerabilityAdvisorV4.get_service_url_for_region('ap-south') == 'https://au.icr.io'
    assert VulnerabilityAdvisorV4.get_service_url_for_region('au-syd') == 'https://au.icr.io'
    assert VulnerabilityAdvisorV4.get_service_url_for_region('jp-osa') == 'https://jp2.icr.io'
    assert VulnerabilityAdvisorV4.get_service_url_for_region('ca-tor') == 'https://ca.icr.io'
    assert VulnerabilityAdvisorV4.get_service_url_for_region('br-sao') == 'https://br.icr.io'


##############################################################################
# Start of Service: Report
##############################################################################
# region


class TestNewInstance:
    """
    Test Class for new_instance
    """

    def test_new_instance(self):
        """
        new_instance()
        """
        os.environ['TEST_SERVICE_AUTH_TYPE'] = 'noAuth'

        service = VulnerabilityAdvisorV4.new_instance(
            account=account,
            service_name='TEST_SERVICE',
        )

        assert service is not None
        assert isinstance(service, VulnerabilityAdvisorV4)

    def test_new_instance_without_authenticator(self):
        """
        new_instance_without_authenticator()
        """
        with pytest.raises(ValueError, match='authenticator must be provided'):
            service = VulnerabilityAdvisorV4.new_instance(
                account=account,
                service_name='TEST_SERVICE_NOT_FOUND',
            )

    def test_new_instance_without_required_params(self):
        """
        new_instance_without_required_params()
        """
        with pytest.raises(TypeError, match='new_instance\\(\\) missing \\d required positional arguments?: \'.*\''):
            service = VulnerabilityAdvisorV4.new_instance()

    def test_new_instance_required_param_none(self):
        """
        new_instance_required_param_none()
        """
        with pytest.raises(ValueError, match='account must be provided'):
            service = VulnerabilityAdvisorV4.new_instance(
                account=None,
            )


class TestAccountReportQueryPath:
    """
    Test Class for account_report_query_path
    """

    @responses.activate
    def test_account_report_query_path_all_params(self):
        """
        account_report_query_path()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/report/account')
        mock_response = '{"assessments": {"mapKey": {"configuration_issues": [{"corrective_action": "corrective_action", "description": "description", "exempt": true, "meta": {"mapKey": "inner"}, "type": "type"}], "id": "id", "os_distribution": {"distribution_id": "debian", "version_id": "11", "version_code_name": "bullseye"}, "scan_time": 9, "status": "status", "vulnerabilities": [{"cve_exempt": true, "cve_id": "cve_id", "exempt_security_notice_count": 28, "exempt_status": "exempt_status", "security_notice_count": 21, "security_notices": [{"notice": "notice", "notice_exempt": false, "notice_id": "notice_id", "summary": "summary", "vulnerable_packages": [{"corrective_action": "corrective_action", "description": "description", "fix_version": "fix_version", "installed_version": "installed_version", "package_name": "package_name"}]}], "summary": "summary", "total_security_notice_count": 27}]}}}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        repository = 'testString'
        include_ibm = 'testString'
        include_private = 'testString'

        # Invoke method
        response = _service.account_report_query_path(
            repository=repository,
            include_ibm=include_ibm,
            include_private=include_private,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'repository={}'.format(repository) in query_string
        assert 'includeIBM={}'.format(include_ibm) in query_string
        assert 'includePrivate={}'.format(include_private) in query_string

    def test_account_report_query_path_all_params_with_retries(self):
        # Enable retries and run test_account_report_query_path_all_params.
        _service.enable_retries()
        self.test_account_report_query_path_all_params()

        # Disable retries and run test_account_report_query_path_all_params.
        _service.disable_retries()
        self.test_account_report_query_path_all_params()

    @responses.activate
    def test_account_report_query_path_required_params(self):
        """
        test_account_report_query_path_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/report/account')
        mock_response = '{"assessments": {"mapKey": {"configuration_issues": [{"corrective_action": "corrective_action", "description": "description", "exempt": true, "meta": {"mapKey": "inner"}, "type": "type"}], "id": "id", "os_distribution": {"distribution_id": "debian", "version_id": "11", "version_code_name": "bullseye"}, "scan_time": 9, "status": "status", "vulnerabilities": [{"cve_exempt": true, "cve_id": "cve_id", "exempt_security_notice_count": 28, "exempt_status": "exempt_status", "security_notice_count": 21, "security_notices": [{"notice": "notice", "notice_exempt": false, "notice_id": "notice_id", "summary": "summary", "vulnerable_packages": [{"corrective_action": "corrective_action", "description": "description", "fix_version": "fix_version", "installed_version": "installed_version", "package_name": "package_name"}]}], "summary": "summary", "total_security_notice_count": 27}]}}}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Invoke method
        response = _service.account_report_query_path()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_account_report_query_path_required_params_with_retries(self):
        # Enable retries and run test_account_report_query_path_required_params.
        _service.enable_retries()
        self.test_account_report_query_path_required_params()

        # Disable retries and run test_account_report_query_path_required_params.
        _service.disable_retries()
        self.test_account_report_query_path_required_params()

    @responses.activate
    def test_account_report_query_path_value_error(self):
        """
        test_account_report_query_path_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/report/account')
        mock_response = '{"assessments": {"mapKey": {"configuration_issues": [{"corrective_action": "corrective_action", "description": "description", "exempt": true, "meta": {"mapKey": "inner"}, "type": "type"}], "id": "id", "os_distribution": {"distribution_id": "debian", "version_id": "11", "version_code_name": "bullseye"}, "scan_time": 9, "status": "status", "vulnerabilities": [{"cve_exempt": true, "cve_id": "cve_id", "exempt_security_notice_count": 28, "exempt_status": "exempt_status", "security_notice_count": 21, "security_notices": [{"notice": "notice", "notice_exempt": false, "notice_id": "notice_id", "summary": "summary", "vulnerable_packages": [{"corrective_action": "corrective_action", "description": "description", "fix_version": "fix_version", "installed_version": "installed_version", "package_name": "package_name"}]}], "summary": "summary", "total_security_notice_count": 27}]}}}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.account_report_query_path(**req_copy)

    def test_account_report_query_path_value_error_with_retries(self):
        # Enable retries and run test_account_report_query_path_value_error.
        _service.enable_retries()
        self.test_account_report_query_path_value_error()

        # Disable retries and run test_account_report_query_path_value_error.
        _service.disable_retries()
        self.test_account_report_query_path_value_error()


class TestAccountStatusQueryPath:
    """
    Test Class for account_status_query_path
    """

    @responses.activate
    def test_account_status_query_path_all_params(self):
        """
        account_status_query_path()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/report/account/status')
        mock_response = '{"images": [{"configuration_issue_count": 25, "created_time": 12, "exempt_configuration_issue_count": 32, "exempt_issue_count": 18, "exempt_vulnerability_count": 26, "issue_count": 11, "name": "name", "scan_time": 9, "status": "status", "vulnerability_count": 19}]}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        repository = 'testString'
        include_ibm = 'testString'
        include_private = 'testString'

        # Invoke method
        response = _service.account_status_query_path(
            repository=repository,
            include_ibm=include_ibm,
            include_private=include_private,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'repository={}'.format(repository) in query_string
        assert 'includeIBM={}'.format(include_ibm) in query_string
        assert 'includePrivate={}'.format(include_private) in query_string

    def test_account_status_query_path_all_params_with_retries(self):
        # Enable retries and run test_account_status_query_path_all_params.
        _service.enable_retries()
        self.test_account_status_query_path_all_params()

        # Disable retries and run test_account_status_query_path_all_params.
        _service.disable_retries()
        self.test_account_status_query_path_all_params()

    @responses.activate
    def test_account_status_query_path_required_params(self):
        """
        test_account_status_query_path_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/report/account/status')
        mock_response = '{"images": [{"configuration_issue_count": 25, "created_time": 12, "exempt_configuration_issue_count": 32, "exempt_issue_count": 18, "exempt_vulnerability_count": 26, "issue_count": 11, "name": "name", "scan_time": 9, "status": "status", "vulnerability_count": 19}]}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Invoke method
        response = _service.account_status_query_path()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_account_status_query_path_required_params_with_retries(self):
        # Enable retries and run test_account_status_query_path_required_params.
        _service.enable_retries()
        self.test_account_status_query_path_required_params()

        # Disable retries and run test_account_status_query_path_required_params.
        _service.disable_retries()
        self.test_account_status_query_path_required_params()

    @responses.activate
    def test_account_status_query_path_value_error(self):
        """
        test_account_status_query_path_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/report/account/status')
        mock_response = '{"images": [{"configuration_issue_count": 25, "created_time": 12, "exempt_configuration_issue_count": 32, "exempt_issue_count": 18, "exempt_vulnerability_count": 26, "issue_count": 11, "name": "name", "scan_time": 9, "status": "status", "vulnerability_count": 19}]}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.account_status_query_path(**req_copy)

    def test_account_status_query_path_value_error_with_retries(self):
        # Enable retries and run test_account_status_query_path_value_error.
        _service.enable_retries()
        self.test_account_status_query_path_value_error()

        # Disable retries and run test_account_status_query_path_value_error.
        _service.disable_retries()
        self.test_account_status_query_path_value_error()


class TestImageReportQueryPath:
    """
    Test Class for image_report_query_path
    """

    @responses.activate
    def test_image_report_query_path_all_params(self):
        """
        image_report_query_path()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/report/image/testString')
        mock_response = '{"configuration_issues": [{"corrective_action": "corrective_action", "description": "description", "exempt": true, "meta": {"mapKey": "inner"}, "type": "type"}], "id": "id", "os_distribution": {"distribution_id": "debian", "version_id": "11", "version_code_name": "bullseye"}, "scan_time": 9, "status": "status", "vulnerabilities": [{"cve_exempt": true, "cve_id": "cve_id", "exempt_security_notice_count": 28, "exempt_status": "exempt_status", "security_notice_count": 21, "security_notices": [{"notice": "notice", "notice_exempt": false, "notice_id": "notice_id", "summary": "summary", "vulnerable_packages": [{"corrective_action": "corrective_action", "description": "description", "fix_version": "fix_version", "installed_version": "installed_version", "package_name": "package_name"}]}], "summary": "summary", "total_security_notice_count": 27}]}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        name = 'testString'

        # Invoke method
        response = _service.image_report_query_path(
            name,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_image_report_query_path_all_params_with_retries(self):
        # Enable retries and run test_image_report_query_path_all_params.
        _service.enable_retries()
        self.test_image_report_query_path_all_params()

        # Disable retries and run test_image_report_query_path_all_params.
        _service.disable_retries()
        self.test_image_report_query_path_all_params()

    @responses.activate
    def test_image_report_query_path_required_params(self):
        """
        test_image_report_query_path_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/report/image/testString')
        mock_response = '{"configuration_issues": [{"corrective_action": "corrective_action", "description": "description", "exempt": true, "meta": {"mapKey": "inner"}, "type": "type"}], "id": "id", "os_distribution": {"distribution_id": "debian", "version_id": "11", "version_code_name": "bullseye"}, "scan_time": 9, "status": "status", "vulnerabilities": [{"cve_exempt": true, "cve_id": "cve_id", "exempt_security_notice_count": 28, "exempt_status": "exempt_status", "security_notice_count": 21, "security_notices": [{"notice": "notice", "notice_exempt": false, "notice_id": "notice_id", "summary": "summary", "vulnerable_packages": [{"corrective_action": "corrective_action", "description": "description", "fix_version": "fix_version", "installed_version": "installed_version", "package_name": "package_name"}]}], "summary": "summary", "total_security_notice_count": 27}]}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        name = 'testString'

        # Invoke method
        response = _service.image_report_query_path(
            name,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_image_report_query_path_required_params_with_retries(self):
        # Enable retries and run test_image_report_query_path_required_params.
        _service.enable_retries()
        self.test_image_report_query_path_required_params()

        # Disable retries and run test_image_report_query_path_required_params.
        _service.disable_retries()
        self.test_image_report_query_path_required_params()

    @responses.activate
    def test_image_report_query_path_value_error(self):
        """
        test_image_report_query_path_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/report/image/testString')
        mock_response = '{"configuration_issues": [{"corrective_action": "corrective_action", "description": "description", "exempt": true, "meta": {"mapKey": "inner"}, "type": "type"}], "id": "id", "os_distribution": {"distribution_id": "debian", "version_id": "11", "version_code_name": "bullseye"}, "scan_time": 9, "status": "status", "vulnerabilities": [{"cve_exempt": true, "cve_id": "cve_id", "exempt_security_notice_count": 28, "exempt_status": "exempt_status", "security_notice_count": 21, "security_notices": [{"notice": "notice", "notice_exempt": false, "notice_id": "notice_id", "summary": "summary", "vulnerable_packages": [{"corrective_action": "corrective_action", "description": "description", "fix_version": "fix_version", "installed_version": "installed_version", "package_name": "package_name"}]}], "summary": "summary", "total_security_notice_count": 27}]}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "name": name,
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.image_report_query_path(**req_copy)

    def test_image_report_query_path_value_error_with_retries(self):
        # Enable retries and run test_image_report_query_path_value_error.
        _service.enable_retries()
        self.test_image_report_query_path_value_error()

        # Disable retries and run test_image_report_query_path_value_error.
        _service.disable_retries()
        self.test_image_report_query_path_value_error()


class TestImageStatusQueryPath:
    """
    Test Class for image_status_query_path
    """

    @responses.activate
    def test_image_status_query_path_all_params(self):
        """
        image_status_query_path()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/report/image/status/testString')
        mock_response = '{"configuration_issue_count": 25, "exempt_configuration_issue_count": 32, "exempt_issue_count": 18, "exempt_vulnerability_count": 26, "issue_count": 11, "scan_time": 9, "status": "status", "vulnerability_count": 19}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        name = 'testString'

        # Invoke method
        response = _service.image_status_query_path(
            name,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_image_status_query_path_all_params_with_retries(self):
        # Enable retries and run test_image_status_query_path_all_params.
        _service.enable_retries()
        self.test_image_status_query_path_all_params()

        # Disable retries and run test_image_status_query_path_all_params.
        _service.disable_retries()
        self.test_image_status_query_path_all_params()

    @responses.activate
    def test_image_status_query_path_required_params(self):
        """
        test_image_status_query_path_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/report/image/status/testString')
        mock_response = '{"configuration_issue_count": 25, "exempt_configuration_issue_count": 32, "exempt_issue_count": 18, "exempt_vulnerability_count": 26, "issue_count": 11, "scan_time": 9, "status": "status", "vulnerability_count": 19}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        name = 'testString'

        # Invoke method
        response = _service.image_status_query_path(
            name,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_image_status_query_path_required_params_with_retries(self):
        # Enable retries and run test_image_status_query_path_required_params.
        _service.enable_retries()
        self.test_image_status_query_path_required_params()

        # Disable retries and run test_image_status_query_path_required_params.
        _service.disable_retries()
        self.test_image_status_query_path_required_params()

    @responses.activate
    def test_image_status_query_path_value_error(self):
        """
        test_image_status_query_path_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/report/image/status/testString')
        mock_response = '{"configuration_issue_count": 25, "exempt_configuration_issue_count": 32, "exempt_issue_count": 18, "exempt_vulnerability_count": 26, "issue_count": 11, "scan_time": 9, "status": "status", "vulnerability_count": 19}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        name = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "name": name,
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.image_status_query_path(**req_copy)

    def test_image_status_query_path_value_error_with_retries(self):
        # Enable retries and run test_image_status_query_path_value_error.
        _service.enable_retries()
        self.test_image_status_query_path_value_error()

        # Disable retries and run test_image_status_query_path_value_error.
        _service.disable_retries()
        self.test_image_status_query_path_value_error()


# endregion
##############################################################################
# End of Service: Report
##############################################################################

##############################################################################
# Start of Service: Exemption
##############################################################################
# region


class TestNewInstance:
    """
    Test Class for new_instance
    """

    def test_new_instance(self):
        """
        new_instance()
        """
        os.environ['TEST_SERVICE_AUTH_TYPE'] = 'noAuth'

        service = VulnerabilityAdvisorV4.new_instance(
            account=account,
            service_name='TEST_SERVICE',
        )

        assert service is not None
        assert isinstance(service, VulnerabilityAdvisorV4)

    def test_new_instance_without_authenticator(self):
        """
        new_instance_without_authenticator()
        """
        with pytest.raises(ValueError, match='authenticator must be provided'):
            service = VulnerabilityAdvisorV4.new_instance(
                account=account,
                service_name='TEST_SERVICE_NOT_FOUND',
            )

    def test_new_instance_without_required_params(self):
        """
        new_instance_without_required_params()
        """
        with pytest.raises(TypeError, match='new_instance\\(\\) missing \\d required positional arguments?: \'.*\''):
            service = VulnerabilityAdvisorV4.new_instance()

    def test_new_instance_required_param_none(self):
        """
        new_instance_required_param_none()
        """
        with pytest.raises(ValueError, match='account must be provided'):
            service = VulnerabilityAdvisorV4.new_instance(
                account=None,
            )


class TestListExemptionAccount:
    """
    Test Class for list_exemption_account
    """

    @responses.activate
    def test_list_exemption_account_all_params(self):
        """
        list_exemption_account()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image')
        mock_response = '[{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}]'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Invoke method
        response = _service.list_exemption_account()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_list_exemption_account_all_params_with_retries(self):
        # Enable retries and run test_list_exemption_account_all_params.
        _service.enable_retries()
        self.test_list_exemption_account_all_params()

        # Disable retries and run test_list_exemption_account_all_params.
        _service.disable_retries()
        self.test_list_exemption_account_all_params()

    @responses.activate
    def test_list_exemption_account_required_params(self):
        """
        test_list_exemption_account_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image')
        mock_response = '[{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}]'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Invoke method
        response = _service.list_exemption_account()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_list_exemption_account_required_params_with_retries(self):
        # Enable retries and run test_list_exemption_account_required_params.
        _service.enable_retries()
        self.test_list_exemption_account_required_params()

        # Disable retries and run test_list_exemption_account_required_params.
        _service.disable_retries()
        self.test_list_exemption_account_required_params()

    @responses.activate
    def test_list_exemption_account_value_error(self):
        """
        test_list_exemption_account_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image')
        mock_response = '[{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}]'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.list_exemption_account(**req_copy)

    def test_list_exemption_account_value_error_with_retries(self):
        # Enable retries and run test_list_exemption_account_value_error.
        _service.enable_retries()
        self.test_list_exemption_account_value_error()

        # Disable retries and run test_list_exemption_account_value_error.
        _service.disable_retries()
        self.test_list_exemption_account_value_error()


class TestGetExemptionAccount:
    """
    Test Class for get_exemption_account
    """

    @responses.activate
    def test_get_exemption_account_all_params(self):
        """
        get_exemption_account()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/issue/testString/testString')
        mock_response = '{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        issue_type = 'testString'
        issue_id = 'testString'

        # Invoke method
        response = _service.get_exemption_account(
            issue_type,
            issue_id,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_get_exemption_account_all_params_with_retries(self):
        # Enable retries and run test_get_exemption_account_all_params.
        _service.enable_retries()
        self.test_get_exemption_account_all_params()

        # Disable retries and run test_get_exemption_account_all_params.
        _service.disable_retries()
        self.test_get_exemption_account_all_params()

    @responses.activate
    def test_get_exemption_account_required_params(self):
        """
        test_get_exemption_account_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/issue/testString/testString')
        mock_response = '{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        issue_type = 'testString'
        issue_id = 'testString'

        # Invoke method
        response = _service.get_exemption_account(
            issue_type,
            issue_id,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_get_exemption_account_required_params_with_retries(self):
        # Enable retries and run test_get_exemption_account_required_params.
        _service.enable_retries()
        self.test_get_exemption_account_required_params()

        # Disable retries and run test_get_exemption_account_required_params.
        _service.disable_retries()
        self.test_get_exemption_account_required_params()

    @responses.activate
    def test_get_exemption_account_value_error(self):
        """
        test_get_exemption_account_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/issue/testString/testString')
        mock_response = '{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        issue_type = 'testString'
        issue_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "issue_type": issue_type,
            "issue_id": issue_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.get_exemption_account(**req_copy)

    def test_get_exemption_account_value_error_with_retries(self):
        # Enable retries and run test_get_exemption_account_value_error.
        _service.enable_retries()
        self.test_get_exemption_account_value_error()

        # Disable retries and run test_get_exemption_account_value_error.
        _service.disable_retries()
        self.test_get_exemption_account_value_error()


class TestCreateExemptionAccount:
    """
    Test Class for create_exemption_account
    """

    @responses.activate
    def test_create_exemption_account_all_params(self):
        """
        create_exemption_account()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/issue/testString/testString')
        mock_response = '{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}'
        responses.add(
            responses.POST,
            url,
            body=mock_response,
            content_type='application/json',
            status=201,
        )

        # Set up parameter values
        issue_type = 'testString'
        issue_id = 'testString'

        # Invoke method
        response = _service.create_exemption_account(
            issue_type,
            issue_id,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201

    def test_create_exemption_account_all_params_with_retries(self):
        # Enable retries and run test_create_exemption_account_all_params.
        _service.enable_retries()
        self.test_create_exemption_account_all_params()

        # Disable retries and run test_create_exemption_account_all_params.
        _service.disable_retries()
        self.test_create_exemption_account_all_params()

    @responses.activate
    def test_create_exemption_account_required_params(self):
        """
        test_create_exemption_account_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/issue/testString/testString')
        mock_response = '{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}'
        responses.add(
            responses.POST,
            url,
            body=mock_response,
            content_type='application/json',
            status=201,
        )

        # Set up parameter values
        issue_type = 'testString'
        issue_id = 'testString'

        # Invoke method
        response = _service.create_exemption_account(
            issue_type,
            issue_id,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201

    def test_create_exemption_account_required_params_with_retries(self):
        # Enable retries and run test_create_exemption_account_required_params.
        _service.enable_retries()
        self.test_create_exemption_account_required_params()

        # Disable retries and run test_create_exemption_account_required_params.
        _service.disable_retries()
        self.test_create_exemption_account_required_params()

    @responses.activate
    def test_create_exemption_account_value_error(self):
        """
        test_create_exemption_account_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/issue/testString/testString')
        mock_response = '{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}'
        responses.add(
            responses.POST,
            url,
            body=mock_response,
            content_type='application/json',
            status=201,
        )

        # Set up parameter values
        issue_type = 'testString'
        issue_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "issue_type": issue_type,
            "issue_id": issue_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.create_exemption_account(**req_copy)

    def test_create_exemption_account_value_error_with_retries(self):
        # Enable retries and run test_create_exemption_account_value_error.
        _service.enable_retries()
        self.test_create_exemption_account_value_error()

        # Disable retries and run test_create_exemption_account_value_error.
        _service.disable_retries()
        self.test_create_exemption_account_value_error()


class TestDeleteExemptionAccount:
    """
    Test Class for delete_exemption_account
    """

    @responses.activate
    def test_delete_exemption_account_all_params(self):
        """
        delete_exemption_account()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/issue/testString/testString')
        responses.add(
            responses.DELETE,
            url,
            status=200,
        )

        # Set up parameter values
        issue_type = 'testString'
        issue_id = 'testString'

        # Invoke method
        response = _service.delete_exemption_account(
            issue_type,
            issue_id,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_delete_exemption_account_all_params_with_retries(self):
        # Enable retries and run test_delete_exemption_account_all_params.
        _service.enable_retries()
        self.test_delete_exemption_account_all_params()

        # Disable retries and run test_delete_exemption_account_all_params.
        _service.disable_retries()
        self.test_delete_exemption_account_all_params()

    @responses.activate
    def test_delete_exemption_account_required_params(self):
        """
        test_delete_exemption_account_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/issue/testString/testString')
        responses.add(
            responses.DELETE,
            url,
            status=200,
        )

        # Set up parameter values
        issue_type = 'testString'
        issue_id = 'testString'

        # Invoke method
        response = _service.delete_exemption_account(
            issue_type,
            issue_id,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_delete_exemption_account_required_params_with_retries(self):
        # Enable retries and run test_delete_exemption_account_required_params.
        _service.enable_retries()
        self.test_delete_exemption_account_required_params()

        # Disable retries and run test_delete_exemption_account_required_params.
        _service.disable_retries()
        self.test_delete_exemption_account_required_params()

    @responses.activate
    def test_delete_exemption_account_value_error(self):
        """
        test_delete_exemption_account_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/issue/testString/testString')
        responses.add(
            responses.DELETE,
            url,
            status=200,
        )

        # Set up parameter values
        issue_type = 'testString'
        issue_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "issue_type": issue_type,
            "issue_id": issue_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.delete_exemption_account(**req_copy)

    def test_delete_exemption_account_value_error_with_retries(self):
        # Enable retries and run test_delete_exemption_account_value_error.
        _service.enable_retries()
        self.test_delete_exemption_account_value_error()

        # Disable retries and run test_delete_exemption_account_value_error.
        _service.disable_retries()
        self.test_delete_exemption_account_value_error()


class TestListExemptionResource:
    """
    Test Class for list_exemption_resource
    """

    @responses.activate
    def test_list_exemption_resource_all_params(self):
        """
        list_exemption_resource()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/testString')
        mock_response = '[{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}]'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        resource = 'testString'

        # Invoke method
        response = _service.list_exemption_resource(
            resource,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_list_exemption_resource_all_params_with_retries(self):
        # Enable retries and run test_list_exemption_resource_all_params.
        _service.enable_retries()
        self.test_list_exemption_resource_all_params()

        # Disable retries and run test_list_exemption_resource_all_params.
        _service.disable_retries()
        self.test_list_exemption_resource_all_params()

    @responses.activate
    def test_list_exemption_resource_required_params(self):
        """
        test_list_exemption_resource_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/testString')
        mock_response = '[{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}]'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        resource = 'testString'

        # Invoke method
        response = _service.list_exemption_resource(
            resource,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_list_exemption_resource_required_params_with_retries(self):
        # Enable retries and run test_list_exemption_resource_required_params.
        _service.enable_retries()
        self.test_list_exemption_resource_required_params()

        # Disable retries and run test_list_exemption_resource_required_params.
        _service.disable_retries()
        self.test_list_exemption_resource_required_params()

    @responses.activate
    def test_list_exemption_resource_value_error(self):
        """
        test_list_exemption_resource_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/testString')
        mock_response = '[{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}]'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        resource = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "resource": resource,
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.list_exemption_resource(**req_copy)

    def test_list_exemption_resource_value_error_with_retries(self):
        # Enable retries and run test_list_exemption_resource_value_error.
        _service.enable_retries()
        self.test_list_exemption_resource_value_error()

        # Disable retries and run test_list_exemption_resource_value_error.
        _service.disable_retries()
        self.test_list_exemption_resource_value_error()


class TestGetExemptionResource:
    """
    Test Class for get_exemption_resource
    """

    @responses.activate
    def test_get_exemption_resource_all_params(self):
        """
        get_exemption_resource()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/testString/issue/testString/testString')
        mock_response = '{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        resource = 'testString'
        issue_type = 'testString'
        issue_id = 'testString'

        # Invoke method
        response = _service.get_exemption_resource(
            resource,
            issue_type,
            issue_id,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_get_exemption_resource_all_params_with_retries(self):
        # Enable retries and run test_get_exemption_resource_all_params.
        _service.enable_retries()
        self.test_get_exemption_resource_all_params()

        # Disable retries and run test_get_exemption_resource_all_params.
        _service.disable_retries()
        self.test_get_exemption_resource_all_params()

    @responses.activate
    def test_get_exemption_resource_required_params(self):
        """
        test_get_exemption_resource_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/testString/issue/testString/testString')
        mock_response = '{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        resource = 'testString'
        issue_type = 'testString'
        issue_id = 'testString'

        # Invoke method
        response = _service.get_exemption_resource(
            resource,
            issue_type,
            issue_id,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_get_exemption_resource_required_params_with_retries(self):
        # Enable retries and run test_get_exemption_resource_required_params.
        _service.enable_retries()
        self.test_get_exemption_resource_required_params()

        # Disable retries and run test_get_exemption_resource_required_params.
        _service.disable_retries()
        self.test_get_exemption_resource_required_params()

    @responses.activate
    def test_get_exemption_resource_value_error(self):
        """
        test_get_exemption_resource_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/testString/issue/testString/testString')
        mock_response = '{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        resource = 'testString'
        issue_type = 'testString'
        issue_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "resource": resource,
            "issue_type": issue_type,
            "issue_id": issue_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.get_exemption_resource(**req_copy)

    def test_get_exemption_resource_value_error_with_retries(self):
        # Enable retries and run test_get_exemption_resource_value_error.
        _service.enable_retries()
        self.test_get_exemption_resource_value_error()

        # Disable retries and run test_get_exemption_resource_value_error.
        _service.disable_retries()
        self.test_get_exemption_resource_value_error()


class TestCreateExemptionResource:
    """
    Test Class for create_exemption_resource
    """

    @responses.activate
    def test_create_exemption_resource_all_params(self):
        """
        create_exemption_resource()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/testString/issue/testString/testString')
        mock_response = '{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}'
        responses.add(
            responses.POST,
            url,
            body=mock_response,
            content_type='application/json',
            status=201,
        )

        # Set up parameter values
        resource = 'testString'
        issue_type = 'testString'
        issue_id = 'testString'

        # Invoke method
        response = _service.create_exemption_resource(
            resource,
            issue_type,
            issue_id,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201

    def test_create_exemption_resource_all_params_with_retries(self):
        # Enable retries and run test_create_exemption_resource_all_params.
        _service.enable_retries()
        self.test_create_exemption_resource_all_params()

        # Disable retries and run test_create_exemption_resource_all_params.
        _service.disable_retries()
        self.test_create_exemption_resource_all_params()

    @responses.activate
    def test_create_exemption_resource_required_params(self):
        """
        test_create_exemption_resource_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/testString/issue/testString/testString')
        mock_response = '{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}'
        responses.add(
            responses.POST,
            url,
            body=mock_response,
            content_type='application/json',
            status=201,
        )

        # Set up parameter values
        resource = 'testString'
        issue_type = 'testString'
        issue_id = 'testString'

        # Invoke method
        response = _service.create_exemption_resource(
            resource,
            issue_type,
            issue_id,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 201

    def test_create_exemption_resource_required_params_with_retries(self):
        # Enable retries and run test_create_exemption_resource_required_params.
        _service.enable_retries()
        self.test_create_exemption_resource_required_params()

        # Disable retries and run test_create_exemption_resource_required_params.
        _service.disable_retries()
        self.test_create_exemption_resource_required_params()

    @responses.activate
    def test_create_exemption_resource_value_error(self):
        """
        test_create_exemption_resource_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/testString/issue/testString/testString')
        mock_response = '{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}'
        responses.add(
            responses.POST,
            url,
            body=mock_response,
            content_type='application/json',
            status=201,
        )

        # Set up parameter values
        resource = 'testString'
        issue_type = 'testString'
        issue_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "resource": resource,
            "issue_type": issue_type,
            "issue_id": issue_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.create_exemption_resource(**req_copy)

    def test_create_exemption_resource_value_error_with_retries(self):
        # Enable retries and run test_create_exemption_resource_value_error.
        _service.enable_retries()
        self.test_create_exemption_resource_value_error()

        # Disable retries and run test_create_exemption_resource_value_error.
        _service.disable_retries()
        self.test_create_exemption_resource_value_error()


class TestDeleteExemptionResource:
    """
    Test Class for delete_exemption_resource
    """

    @responses.activate
    def test_delete_exemption_resource_all_params(self):
        """
        delete_exemption_resource()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/testString/issue/testString/testString')
        responses.add(
            responses.DELETE,
            url,
            status=200,
        )

        # Set up parameter values
        resource = 'testString'
        issue_type = 'testString'
        issue_id = 'testString'

        # Invoke method
        response = _service.delete_exemption_resource(
            resource,
            issue_type,
            issue_id,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_delete_exemption_resource_all_params_with_retries(self):
        # Enable retries and run test_delete_exemption_resource_all_params.
        _service.enable_retries()
        self.test_delete_exemption_resource_all_params()

        # Disable retries and run test_delete_exemption_resource_all_params.
        _service.disable_retries()
        self.test_delete_exemption_resource_all_params()

    @responses.activate
    def test_delete_exemption_resource_required_params(self):
        """
        test_delete_exemption_resource_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/testString/issue/testString/testString')
        responses.add(
            responses.DELETE,
            url,
            status=200,
        )

        # Set up parameter values
        resource = 'testString'
        issue_type = 'testString'
        issue_id = 'testString'

        # Invoke method
        response = _service.delete_exemption_resource(
            resource,
            issue_type,
            issue_id,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_delete_exemption_resource_required_params_with_retries(self):
        # Enable retries and run test_delete_exemption_resource_required_params.
        _service.enable_retries()
        self.test_delete_exemption_resource_required_params()

        # Disable retries and run test_delete_exemption_resource_required_params.
        _service.disable_retries()
        self.test_delete_exemption_resource_required_params()

    @responses.activate
    def test_delete_exemption_resource_value_error(self):
        """
        test_delete_exemption_resource_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/image/testString/issue/testString/testString')
        responses.add(
            responses.DELETE,
            url,
            status=200,
        )

        # Set up parameter values
        resource = 'testString'
        issue_type = 'testString'
        issue_id = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "resource": resource,
            "issue_type": issue_type,
            "issue_id": issue_id,
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.delete_exemption_resource(**req_copy)

    def test_delete_exemption_resource_value_error_with_retries(self):
        # Enable retries and run test_delete_exemption_resource_value_error.
        _service.enable_retries()
        self.test_delete_exemption_resource_value_error()

        # Disable retries and run test_delete_exemption_resource_value_error.
        _service.disable_retries()
        self.test_delete_exemption_resource_value_error()


class TestExemptHandler:
    """
    Test Class for exempt_handler
    """

    @responses.activate
    def test_exempt_handler_all_params(self):
        """
        exempt_handler()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/types')
        mock_response = '[{"display_name": "display_name", "identifier": "identifier", "translationKey": "translation_key", "validation_regex": "validation_regex"}]'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Invoke method
        response = _service.exempt_handler()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_exempt_handler_all_params_with_retries(self):
        # Enable retries and run test_exempt_handler_all_params.
        _service.enable_retries()
        self.test_exempt_handler_all_params()

        # Disable retries and run test_exempt_handler_all_params.
        _service.disable_retries()
        self.test_exempt_handler_all_params()

    @responses.activate
    def test_exempt_handler_required_params(self):
        """
        test_exempt_handler_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/types')
        mock_response = '[{"display_name": "display_name", "identifier": "identifier", "translationKey": "translation_key", "validation_regex": "validation_regex"}]'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Invoke method
        response = _service.exempt_handler()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_exempt_handler_required_params_with_retries(self):
        # Enable retries and run test_exempt_handler_required_params.
        _service.enable_retries()
        self.test_exempt_handler_required_params()

        # Disable retries and run test_exempt_handler_required_params.
        _service.disable_retries()
        self.test_exempt_handler_required_params()

    @responses.activate
    def test_exempt_handler_value_error(self):
        """
        test_exempt_handler_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exempt/types')
        mock_response = '[{"display_name": "display_name", "identifier": "identifier", "translationKey": "translation_key", "validation_regex": "validation_regex"}]'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.exempt_handler(**req_copy)

    def test_exempt_handler_value_error_with_retries(self):
        # Enable retries and run test_exempt_handler_value_error.
        _service.enable_retries()
        self.test_exempt_handler_value_error()

        # Disable retries and run test_exempt_handler_value_error.
        _service.disable_retries()
        self.test_exempt_handler_value_error()


class TestListAccountExemptions:
    """
    Test Class for list_account_exemptions
    """

    @responses.activate
    def test_list_account_exemptions_all_params(self):
        """
        list_account_exemptions()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exemptions/account')
        mock_response = '[{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}]'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Invoke method
        response = _service.list_account_exemptions()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_list_account_exemptions_all_params_with_retries(self):
        # Enable retries and run test_list_account_exemptions_all_params.
        _service.enable_retries()
        self.test_list_account_exemptions_all_params()

        # Disable retries and run test_list_account_exemptions_all_params.
        _service.disable_retries()
        self.test_list_account_exemptions_all_params()

    @responses.activate
    def test_list_account_exemptions_required_params(self):
        """
        test_list_account_exemptions_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exemptions/account')
        mock_response = '[{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}]'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Invoke method
        response = _service.list_account_exemptions()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_list_account_exemptions_required_params_with_retries(self):
        # Enable retries and run test_list_account_exemptions_required_params.
        _service.enable_retries()
        self.test_list_account_exemptions_required_params()

        # Disable retries and run test_list_account_exemptions_required_params.
        _service.disable_retries()
        self.test_list_account_exemptions_required_params()

    @responses.activate
    def test_list_account_exemptions_value_error(self):
        """
        test_list_account_exemptions_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exemptions/account')
        mock_response = '[{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}]'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.list_account_exemptions(**req_copy)

    def test_list_account_exemptions_value_error_with_retries(self):
        # Enable retries and run test_list_account_exemptions_value_error.
        _service.enable_retries()
        self.test_list_account_exemptions_value_error()

        # Disable retries and run test_list_account_exemptions_value_error.
        _service.disable_retries()
        self.test_list_account_exemptions_value_error()


class TestExemptionsAccountDeleteHandler:
    """
    Test Class for exemptions_account_delete_handler
    """

    @responses.activate
    def test_exemptions_account_delete_handler_all_params(self):
        """
        exemptions_account_delete_handler()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exemptions/deleteAll')
        mock_response = '{"number_of_exemptions_deleted": 28}'
        responses.add(
            responses.POST,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Invoke method
        response = _service.exemptions_account_delete_handler()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_exemptions_account_delete_handler_all_params_with_retries(self):
        # Enable retries and run test_exemptions_account_delete_handler_all_params.
        _service.enable_retries()
        self.test_exemptions_account_delete_handler_all_params()

        # Disable retries and run test_exemptions_account_delete_handler_all_params.
        _service.disable_retries()
        self.test_exemptions_account_delete_handler_all_params()

    @responses.activate
    def test_exemptions_account_delete_handler_required_params(self):
        """
        test_exemptions_account_delete_handler_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exemptions/deleteAll')
        mock_response = '{"number_of_exemptions_deleted": 28}'
        responses.add(
            responses.POST,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Invoke method
        response = _service.exemptions_account_delete_handler()

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_exemptions_account_delete_handler_required_params_with_retries(self):
        # Enable retries and run test_exemptions_account_delete_handler_required_params.
        _service.enable_retries()
        self.test_exemptions_account_delete_handler_required_params()

        # Disable retries and run test_exemptions_account_delete_handler_required_params.
        _service.disable_retries()
        self.test_exemptions_account_delete_handler_required_params()

    @responses.activate
    def test_exemptions_account_delete_handler_value_error(self):
        """
        test_exemptions_account_delete_handler_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exemptions/deleteAll')
        mock_response = '{"number_of_exemptions_deleted": 28}'
        responses.add(
            responses.POST,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.exemptions_account_delete_handler(**req_copy)

    def test_exemptions_account_delete_handler_value_error_with_retries(self):
        # Enable retries and run test_exemptions_account_delete_handler_value_error.
        _service.enable_retries()
        self.test_exemptions_account_delete_handler_value_error()

        # Disable retries and run test_exemptions_account_delete_handler_value_error.
        _service.disable_retries()
        self.test_exemptions_account_delete_handler_value_error()


class TestListImageExemptions:
    """
    Test Class for list_image_exemptions
    """

    @responses.activate
    def test_list_image_exemptions_all_params(self):
        """
        list_image_exemptions()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exemptions/image/testString')
        mock_response = '[{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}]'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        resource = 'testString'
        include_scope = False

        # Invoke method
        response = _service.list_image_exemptions(
            resource,
            include_scope=include_scope,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate query params
        query_string = responses.calls[0].request.url.split('?', 1)[1]
        query_string = urllib.parse.unquote_plus(query_string)
        assert 'includeScope={}'.format('true' if include_scope else 'false') in query_string

    def test_list_image_exemptions_all_params_with_retries(self):
        # Enable retries and run test_list_image_exemptions_all_params.
        _service.enable_retries()
        self.test_list_image_exemptions_all_params()

        # Disable retries and run test_list_image_exemptions_all_params.
        _service.disable_retries()
        self.test_list_image_exemptions_all_params()

    @responses.activate
    def test_list_image_exemptions_required_params(self):
        """
        test_list_image_exemptions_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exemptions/image/testString')
        mock_response = '[{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}]'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        resource = 'testString'

        # Invoke method
        response = _service.list_image_exemptions(
            resource,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200

    def test_list_image_exemptions_required_params_with_retries(self):
        # Enable retries and run test_list_image_exemptions_required_params.
        _service.enable_retries()
        self.test_list_image_exemptions_required_params()

        # Disable retries and run test_list_image_exemptions_required_params.
        _service.disable_retries()
        self.test_list_image_exemptions_required_params()

    @responses.activate
    def test_list_image_exemptions_value_error(self):
        """
        test_list_image_exemptions_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exemptions/image/testString')
        mock_response = '[{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}]'
        responses.add(
            responses.GET,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        resource = 'testString'

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "resource": resource,
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.list_image_exemptions(**req_copy)

    def test_list_image_exemptions_value_error_with_retries(self):
        # Enable retries and run test_list_image_exemptions_value_error.
        _service.enable_retries()
        self.test_list_image_exemptions_value_error()

        # Disable retries and run test_list_image_exemptions_value_error.
        _service.disable_retries()
        self.test_list_image_exemptions_value_error()


class TestListBulkImageExemptions:
    """
    Test Class for list_bulk_image_exemptions
    """

    @responses.activate
    def test_list_bulk_image_exemptions_all_params(self):
        """
        list_bulk_image_exemptions()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exemptions/images')
        mock_response = '{"mapKey": [{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}]}'
        responses.add(
            responses.POST,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        body = ['us.icr.io/birds/woodpecker:green', 'us.icr.io/birds/grebe:crested']

        # Invoke method
        response = _service.list_bulk_image_exemptions(
            body,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == body

    def test_list_bulk_image_exemptions_all_params_with_retries(self):
        # Enable retries and run test_list_bulk_image_exemptions_all_params.
        _service.enable_retries()
        self.test_list_bulk_image_exemptions_all_params()

        # Disable retries and run test_list_bulk_image_exemptions_all_params.
        _service.disable_retries()
        self.test_list_bulk_image_exemptions_all_params()

    @responses.activate
    def test_list_bulk_image_exemptions_required_params(self):
        """
        test_list_bulk_image_exemptions_required_params()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exemptions/images')
        mock_response = '{"mapKey": [{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}]}'
        responses.add(
            responses.POST,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        body = ['us.icr.io/birds/woodpecker:green', 'us.icr.io/birds/grebe:crested']

        # Invoke method
        response = _service.list_bulk_image_exemptions(
            body,
            headers={},
        )

        # Check for correct operation
        assert len(responses.calls) == 1
        assert response.status_code == 200
        # Validate body params
        req_body = json.loads(str(responses.calls[0].request.body, 'utf-8'))
        assert req_body == body

    def test_list_bulk_image_exemptions_required_params_with_retries(self):
        # Enable retries and run test_list_bulk_image_exemptions_required_params.
        _service.enable_retries()
        self.test_list_bulk_image_exemptions_required_params()

        # Disable retries and run test_list_bulk_image_exemptions_required_params.
        _service.disable_retries()
        self.test_list_bulk_image_exemptions_required_params()

    @responses.activate
    def test_list_bulk_image_exemptions_value_error(self):
        """
        test_list_bulk_image_exemptions_value_error()
        """
        # Set up mock
        url = preprocess_url('/va/api/v4/exemptions/images')
        mock_response = '{"mapKey": [{"account_id": "account_id", "issue_id": "issue_id", "issue_type": "issue_type", "scope": {"scope_type": "scope_type", "namespace": "namespace", "repository": "repository", "tag": "tag"}}]}'
        responses.add(
            responses.POST,
            url,
            body=mock_response,
            content_type='application/json',
            status=200,
        )

        # Set up parameter values
        body = ['us.icr.io/birds/woodpecker:green', 'us.icr.io/birds/grebe:crested']

        # Pass in all but one required param and check for a ValueError
        req_param_dict = {
            "body": body,
        }
        for param in req_param_dict.keys():
            req_copy = {key: val if key is not param else None for (key, val) in req_param_dict.items()}
            with pytest.raises(ValueError):
                _service.list_bulk_image_exemptions(**req_copy)

    def test_list_bulk_image_exemptions_value_error_with_retries(self):
        # Enable retries and run test_list_bulk_image_exemptions_value_error.
        _service.enable_retries()
        self.test_list_bulk_image_exemptions_value_error()

        # Disable retries and run test_list_bulk_image_exemptions_value_error.
        _service.disable_retries()
        self.test_list_bulk_image_exemptions_value_error()


# endregion
##############################################################################
# End of Service: Exemption
##############################################################################


##############################################################################
# Start of Model Tests
##############################################################################
# region


class TestModel_Exemption:
    """
    Test Class for Exemption
    """

    def test_exemption_serialization(self):
        """
        Test serialization/deserialization for Exemption
        """

        # Construct dict forms of any model objects needed in order to build this model.

        exemption_scope_model = {}  # ExemptionScope
        exemption_scope_model['scope_type'] = 'testString'
        exemption_scope_model['namespace'] = 'testString'
        exemption_scope_model['repository'] = 'testString'
        exemption_scope_model['tag'] = 'testString'

        # Construct a json representation of a Exemption model
        exemption_model_json = {}
        exemption_model_json['account_id'] = 'testString'
        exemption_model_json['issue_id'] = 'testString'
        exemption_model_json['issue_type'] = 'testString'
        exemption_model_json['scope'] = exemption_scope_model

        # Construct a model instance of Exemption by calling from_dict on the json representation
        exemption_model = Exemption.from_dict(exemption_model_json)
        assert exemption_model != False

        # Construct a model instance of Exemption by calling from_dict on the json representation
        exemption_model_dict = Exemption.from_dict(exemption_model_json).__dict__
        exemption_model2 = Exemption(**exemption_model_dict)

        # Verify the model instances are equivalent
        assert exemption_model == exemption_model2

        # Convert model instance back to dict and verify no loss of data
        exemption_model_json2 = exemption_model.to_dict()
        assert exemption_model_json2 == exemption_model_json


class TestModel_ExemptionScope:
    """
    Test Class for ExemptionScope
    """

    def test_exemption_scope_serialization(self):
        """
        Test serialization/deserialization for ExemptionScope
        """

        # Construct a json representation of a ExemptionScope model
        exemption_scope_model_json = {}
        exemption_scope_model_json['scope_type'] = 'testString'
        exemption_scope_model_json['namespace'] = 'testString'
        exemption_scope_model_json['repository'] = 'testString'
        exemption_scope_model_json['tag'] = 'testString'

        # Construct a model instance of ExemptionScope by calling from_dict on the json representation
        exemption_scope_model = ExemptionScope.from_dict(exemption_scope_model_json)
        assert exemption_scope_model != False

        # Construct a model instance of ExemptionScope by calling from_dict on the json representation
        exemption_scope_model_dict = ExemptionScope.from_dict(exemption_scope_model_json).__dict__
        exemption_scope_model2 = ExemptionScope(**exemption_scope_model_dict)

        # Verify the model instances are equivalent
        assert exemption_scope_model == exemption_scope_model2

        # Convert model instance back to dict and verify no loss of data
        exemption_scope_model_json2 = exemption_scope_model.to_dict()
        assert exemption_scope_model_json2 == exemption_scope_model_json


class TestModel_ScanReport:
    """
    Test Class for ScanReport
    """

    def test_scan_report_serialization(self):
        """
        Test serialization/deserialization for ScanReport
        """

        # Construct dict forms of any model objects needed in order to build this model.

        scanresult_configuration_issue_model = {}  # ScanresultConfigurationIssue
        scanresult_configuration_issue_model['corrective_action'] = 'testString'
        scanresult_configuration_issue_model['description'] = 'testString'
        scanresult_configuration_issue_model['exempt'] = True
        scanresult_configuration_issue_model['meta'] = {'key1': 'testString'}
        scanresult_configuration_issue_model['type'] = 'testString'

        scan_report_os_distribution_model = {}  # ScanReportOsDistribution
        scan_report_os_distribution_model['distribution_id'] = 'debian'
        scan_report_os_distribution_model['version_id'] = '11'
        scan_report_os_distribution_model['version_code_name'] = 'bullseye'

        scanresult_package_fixes_model = {}  # ScanresultPackageFixes
        scanresult_package_fixes_model['corrective_action'] = 'testString'
        scanresult_package_fixes_model['description'] = 'testString'
        scanresult_package_fixes_model['fix_version'] = 'testString'
        scanresult_package_fixes_model['installed_version'] = 'testString'
        scanresult_package_fixes_model['package_name'] = 'testString'

        scanresult_security_notice_model = {}  # ScanresultSecurityNotice
        scanresult_security_notice_model['notice'] = 'testString'
        scanresult_security_notice_model['notice_exempt'] = True
        scanresult_security_notice_model['notice_id'] = 'testString'
        scanresult_security_notice_model['summary'] = 'testString'
        scanresult_security_notice_model['vulnerable_packages'] = [scanresult_package_fixes_model]

        scanresult_cve_model = {}  # ScanresultCVE
        scanresult_cve_model['cve_exempt'] = True
        scanresult_cve_model['cve_id'] = 'testString'
        scanresult_cve_model['exempt_security_notice_count'] = 38
        scanresult_cve_model['exempt_status'] = 'testString'
        scanresult_cve_model['security_notice_count'] = 38
        scanresult_cve_model['security_notices'] = [scanresult_security_notice_model]
        scanresult_cve_model['summary'] = 'testString'
        scanresult_cve_model['total_security_notice_count'] = 38

        # Construct a json representation of a ScanReport model
        scan_report_model_json = {}
        scan_report_model_json['configuration_issues'] = [scanresult_configuration_issue_model]
        scan_report_model_json['id'] = 'testString'
        scan_report_model_json['os_distribution'] = scan_report_os_distribution_model
        scan_report_model_json['scan_time'] = 26
        scan_report_model_json['status'] = 'testString'
        scan_report_model_json['vulnerabilities'] = [scanresult_cve_model]

        # Construct a model instance of ScanReport by calling from_dict on the json representation
        scan_report_model = ScanReport.from_dict(scan_report_model_json)
        assert scan_report_model != False

        # Construct a model instance of ScanReport by calling from_dict on the json representation
        scan_report_model_dict = ScanReport.from_dict(scan_report_model_json).__dict__
        scan_report_model2 = ScanReport(**scan_report_model_dict)

        # Verify the model instances are equivalent
        assert scan_report_model == scan_report_model2

        # Convert model instance back to dict and verify no loss of data
        scan_report_model_json2 = scan_report_model.to_dict()
        assert scan_report_model_json2 == scan_report_model_json


class TestModel_ScanReportList:
    """
    Test Class for ScanReportList
    """

    def test_scan_report_list_serialization(self):
        """
        Test serialization/deserialization for ScanReportList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        scanresult_configuration_issue_model = {}  # ScanresultConfigurationIssue
        scanresult_configuration_issue_model['corrective_action'] = 'testString'
        scanresult_configuration_issue_model['description'] = 'testString'
        scanresult_configuration_issue_model['exempt'] = True
        scanresult_configuration_issue_model['meta'] = {'key1': 'testString'}
        scanresult_configuration_issue_model['type'] = 'testString'

        scan_report_os_distribution_model = {}  # ScanReportOsDistribution
        scan_report_os_distribution_model['distribution_id'] = 'debian'
        scan_report_os_distribution_model['version_id'] = '11'
        scan_report_os_distribution_model['version_code_name'] = 'bullseye'

        scanresult_package_fixes_model = {}  # ScanresultPackageFixes
        scanresult_package_fixes_model['corrective_action'] = 'testString'
        scanresult_package_fixes_model['description'] = 'testString'
        scanresult_package_fixes_model['fix_version'] = 'testString'
        scanresult_package_fixes_model['installed_version'] = 'testString'
        scanresult_package_fixes_model['package_name'] = 'testString'

        scanresult_security_notice_model = {}  # ScanresultSecurityNotice
        scanresult_security_notice_model['notice'] = 'testString'
        scanresult_security_notice_model['notice_exempt'] = True
        scanresult_security_notice_model['notice_id'] = 'testString'
        scanresult_security_notice_model['summary'] = 'testString'
        scanresult_security_notice_model['vulnerable_packages'] = [scanresult_package_fixes_model]

        scanresult_cve_model = {}  # ScanresultCVE
        scanresult_cve_model['cve_exempt'] = True
        scanresult_cve_model['cve_id'] = 'testString'
        scanresult_cve_model['exempt_security_notice_count'] = 38
        scanresult_cve_model['exempt_status'] = 'testString'
        scanresult_cve_model['security_notice_count'] = 38
        scanresult_cve_model['security_notices'] = [scanresult_security_notice_model]
        scanresult_cve_model['summary'] = 'testString'
        scanresult_cve_model['total_security_notice_count'] = 38

        scan_report_model = {}  # ScanReport
        scan_report_model['configuration_issues'] = [scanresult_configuration_issue_model]
        scan_report_model['id'] = 'testString'
        scan_report_model['os_distribution'] = scan_report_os_distribution_model
        scan_report_model['scan_time'] = 26
        scan_report_model['status'] = 'testString'
        scan_report_model['vulnerabilities'] = [scanresult_cve_model]

        # Construct a json representation of a ScanReportList model
        scan_report_list_model_json = {}
        scan_report_list_model_json['assessments'] = {'key1': scan_report_model}

        # Construct a model instance of ScanReportList by calling from_dict on the json representation
        scan_report_list_model = ScanReportList.from_dict(scan_report_list_model_json)
        assert scan_report_list_model != False

        # Construct a model instance of ScanReportList by calling from_dict on the json representation
        scan_report_list_model_dict = ScanReportList.from_dict(scan_report_list_model_json).__dict__
        scan_report_list_model2 = ScanReportList(**scan_report_list_model_dict)

        # Verify the model instances are equivalent
        assert scan_report_list_model == scan_report_list_model2

        # Convert model instance back to dict and verify no loss of data
        scan_report_list_model_json2 = scan_report_list_model.to_dict()
        assert scan_report_list_model_json2 == scan_report_list_model_json


class TestModel_ScanReportOsDistribution:
    """
    Test Class for ScanReportOsDistribution
    """

    def test_scan_report_os_distribution_serialization(self):
        """
        Test serialization/deserialization for ScanReportOsDistribution
        """

        # Construct a json representation of a ScanReportOsDistribution model
        scan_report_os_distribution_model_json = {}
        scan_report_os_distribution_model_json['distribution_id'] = 'debian'
        scan_report_os_distribution_model_json['version_id'] = '11'
        scan_report_os_distribution_model_json['version_code_name'] = 'bullseye'

        # Construct a model instance of ScanReportOsDistribution by calling from_dict on the json representation
        scan_report_os_distribution_model = ScanReportOsDistribution.from_dict(scan_report_os_distribution_model_json)
        assert scan_report_os_distribution_model != False

        # Construct a model instance of ScanReportOsDistribution by calling from_dict on the json representation
        scan_report_os_distribution_model_dict = ScanReportOsDistribution.from_dict(scan_report_os_distribution_model_json).__dict__
        scan_report_os_distribution_model2 = ScanReportOsDistribution(**scan_report_os_distribution_model_dict)

        # Verify the model instances are equivalent
        assert scan_report_os_distribution_model == scan_report_os_distribution_model2

        # Convert model instance back to dict and verify no loss of data
        scan_report_os_distribution_model_json2 = scan_report_os_distribution_model.to_dict()
        assert scan_report_os_distribution_model_json2 == scan_report_os_distribution_model_json


class TestModel_ExemptionDeletionInfo:
    """
    Test Class for ExemptionDeletionInfo
    """

    def test_exemption_deletion_info_serialization(self):
        """
        Test serialization/deserialization for ExemptionDeletionInfo
        """

        # Construct a json representation of a ExemptionDeletionInfo model
        exemption_deletion_info_model_json = {}
        exemption_deletion_info_model_json['number_of_exemptions_deleted'] = 38

        # Construct a model instance of ExemptionDeletionInfo by calling from_dict on the json representation
        exemption_deletion_info_model = ExemptionDeletionInfo.from_dict(exemption_deletion_info_model_json)
        assert exemption_deletion_info_model != False

        # Construct a model instance of ExemptionDeletionInfo by calling from_dict on the json representation
        exemption_deletion_info_model_dict = ExemptionDeletionInfo.from_dict(exemption_deletion_info_model_json).__dict__
        exemption_deletion_info_model2 = ExemptionDeletionInfo(**exemption_deletion_info_model_dict)

        # Verify the model instances are equivalent
        assert exemption_deletion_info_model == exemption_deletion_info_model2

        # Convert model instance back to dict and verify no loss of data
        exemption_deletion_info_model_json2 = exemption_deletion_info_model.to_dict()
        assert exemption_deletion_info_model_json2 == exemption_deletion_info_model_json


class TestModel_ExemptionTypeInfo:
    """
    Test Class for ExemptionTypeInfo
    """

    def test_exemption_type_info_serialization(self):
        """
        Test serialization/deserialization for ExemptionTypeInfo
        """

        # Construct a json representation of a ExemptionTypeInfo model
        exemption_type_info_model_json = {}
        exemption_type_info_model_json['display_name'] = 'testString'
        exemption_type_info_model_json['identifier'] = 'testString'
        exemption_type_info_model_json['translationKey'] = 'testString'
        exemption_type_info_model_json['validation_regex'] = 'testString'

        # Construct a model instance of ExemptionTypeInfo by calling from_dict on the json representation
        exemption_type_info_model = ExemptionTypeInfo.from_dict(exemption_type_info_model_json)
        assert exemption_type_info_model != False

        # Construct a model instance of ExemptionTypeInfo by calling from_dict on the json representation
        exemption_type_info_model_dict = ExemptionTypeInfo.from_dict(exemption_type_info_model_json).__dict__
        exemption_type_info_model2 = ExemptionTypeInfo(**exemption_type_info_model_dict)

        # Verify the model instances are equivalent
        assert exemption_type_info_model == exemption_type_info_model2

        # Convert model instance back to dict and verify no loss of data
        exemption_type_info_model_json2 = exemption_type_info_model.to_dict()
        assert exemption_type_info_model_json2 == exemption_type_info_model_json


class TestModel_ScanreportImageSummary:
    """
    Test Class for ScanreportImageSummary
    """

    def test_scanreport_image_summary_serialization(self):
        """
        Test serialization/deserialization for ScanreportImageSummary
        """

        # Construct a json representation of a ScanreportImageSummary model
        scanreport_image_summary_model_json = {}
        scanreport_image_summary_model_json['configuration_issue_count'] = 38
        scanreport_image_summary_model_json['created_time'] = 26
        scanreport_image_summary_model_json['exempt_configuration_issue_count'] = 38
        scanreport_image_summary_model_json['exempt_issue_count'] = 38
        scanreport_image_summary_model_json['exempt_vulnerability_count'] = 38
        scanreport_image_summary_model_json['issue_count'] = 38
        scanreport_image_summary_model_json['name'] = 'testString'
        scanreport_image_summary_model_json['scan_time'] = 26
        scanreport_image_summary_model_json['status'] = 'testString'
        scanreport_image_summary_model_json['vulnerability_count'] = 38

        # Construct a model instance of ScanreportImageSummary by calling from_dict on the json representation
        scanreport_image_summary_model = ScanreportImageSummary.from_dict(scanreport_image_summary_model_json)
        assert scanreport_image_summary_model != False

        # Construct a model instance of ScanreportImageSummary by calling from_dict on the json representation
        scanreport_image_summary_model_dict = ScanreportImageSummary.from_dict(scanreport_image_summary_model_json).__dict__
        scanreport_image_summary_model2 = ScanreportImageSummary(**scanreport_image_summary_model_dict)

        # Verify the model instances are equivalent
        assert scanreport_image_summary_model == scanreport_image_summary_model2

        # Convert model instance back to dict and verify no loss of data
        scanreport_image_summary_model_json2 = scanreport_image_summary_model.to_dict()
        assert scanreport_image_summary_model_json2 == scanreport_image_summary_model_json


class TestModel_ScanreportImageSummaryList:
    """
    Test Class for ScanreportImageSummaryList
    """

    def test_scanreport_image_summary_list_serialization(self):
        """
        Test serialization/deserialization for ScanreportImageSummaryList
        """

        # Construct dict forms of any model objects needed in order to build this model.

        scanreport_image_summary_model = {}  # ScanreportImageSummary
        scanreport_image_summary_model['configuration_issue_count'] = 38
        scanreport_image_summary_model['created_time'] = 26
        scanreport_image_summary_model['exempt_configuration_issue_count'] = 38
        scanreport_image_summary_model['exempt_issue_count'] = 38
        scanreport_image_summary_model['exempt_vulnerability_count'] = 38
        scanreport_image_summary_model['issue_count'] = 38
        scanreport_image_summary_model['name'] = 'testString'
        scanreport_image_summary_model['scan_time'] = 26
        scanreport_image_summary_model['status'] = 'testString'
        scanreport_image_summary_model['vulnerability_count'] = 38

        # Construct a json representation of a ScanreportImageSummaryList model
        scanreport_image_summary_list_model_json = {}
        scanreport_image_summary_list_model_json['images'] = [scanreport_image_summary_model]

        # Construct a model instance of ScanreportImageSummaryList by calling from_dict on the json representation
        scanreport_image_summary_list_model = ScanreportImageSummaryList.from_dict(scanreport_image_summary_list_model_json)
        assert scanreport_image_summary_list_model != False

        # Construct a model instance of ScanreportImageSummaryList by calling from_dict on the json representation
        scanreport_image_summary_list_model_dict = ScanreportImageSummaryList.from_dict(scanreport_image_summary_list_model_json).__dict__
        scanreport_image_summary_list_model2 = ScanreportImageSummaryList(**scanreport_image_summary_list_model_dict)

        # Verify the model instances are equivalent
        assert scanreport_image_summary_list_model == scanreport_image_summary_list_model2

        # Convert model instance back to dict and verify no loss of data
        scanreport_image_summary_list_model_json2 = scanreport_image_summary_list_model.to_dict()
        assert scanreport_image_summary_list_model_json2 == scanreport_image_summary_list_model_json


class TestModel_ScanreportSummary:
    """
    Test Class for ScanreportSummary
    """

    def test_scanreport_summary_serialization(self):
        """
        Test serialization/deserialization for ScanreportSummary
        """

        # Construct a json representation of a ScanreportSummary model
        scanreport_summary_model_json = {}
        scanreport_summary_model_json['configuration_issue_count'] = 38
        scanreport_summary_model_json['exempt_configuration_issue_count'] = 38
        scanreport_summary_model_json['exempt_issue_count'] = 38
        scanreport_summary_model_json['exempt_vulnerability_count'] = 38
        scanreport_summary_model_json['issue_count'] = 38
        scanreport_summary_model_json['scan_time'] = 26
        scanreport_summary_model_json['status'] = 'testString'
        scanreport_summary_model_json['vulnerability_count'] = 38

        # Construct a model instance of ScanreportSummary by calling from_dict on the json representation
        scanreport_summary_model = ScanreportSummary.from_dict(scanreport_summary_model_json)
        assert scanreport_summary_model != False

        # Construct a model instance of ScanreportSummary by calling from_dict on the json representation
        scanreport_summary_model_dict = ScanreportSummary.from_dict(scanreport_summary_model_json).__dict__
        scanreport_summary_model2 = ScanreportSummary(**scanreport_summary_model_dict)

        # Verify the model instances are equivalent
        assert scanreport_summary_model == scanreport_summary_model2

        # Convert model instance back to dict and verify no loss of data
        scanreport_summary_model_json2 = scanreport_summary_model.to_dict()
        assert scanreport_summary_model_json2 == scanreport_summary_model_json


class TestModel_ScanresultCVE:
    """
    Test Class for ScanresultCVE
    """

    def test_scanresult_cve_serialization(self):
        """
        Test serialization/deserialization for ScanresultCVE
        """

        # Construct dict forms of any model objects needed in order to build this model.

        scanresult_package_fixes_model = {}  # ScanresultPackageFixes
        scanresult_package_fixes_model['corrective_action'] = 'testString'
        scanresult_package_fixes_model['description'] = 'testString'
        scanresult_package_fixes_model['fix_version'] = 'testString'
        scanresult_package_fixes_model['installed_version'] = 'testString'
        scanresult_package_fixes_model['package_name'] = 'testString'

        scanresult_security_notice_model = {}  # ScanresultSecurityNotice
        scanresult_security_notice_model['notice'] = 'testString'
        scanresult_security_notice_model['notice_exempt'] = True
        scanresult_security_notice_model['notice_id'] = 'testString'
        scanresult_security_notice_model['summary'] = 'testString'
        scanresult_security_notice_model['vulnerable_packages'] = [scanresult_package_fixes_model]

        # Construct a json representation of a ScanresultCVE model
        scanresult_cve_model_json = {}
        scanresult_cve_model_json['cve_exempt'] = True
        scanresult_cve_model_json['cve_id'] = 'testString'
        scanresult_cve_model_json['exempt_security_notice_count'] = 38
        scanresult_cve_model_json['exempt_status'] = 'testString'
        scanresult_cve_model_json['security_notice_count'] = 38
        scanresult_cve_model_json['security_notices'] = [scanresult_security_notice_model]
        scanresult_cve_model_json['summary'] = 'testString'
        scanresult_cve_model_json['total_security_notice_count'] = 38

        # Construct a model instance of ScanresultCVE by calling from_dict on the json representation
        scanresult_cve_model = ScanresultCVE.from_dict(scanresult_cve_model_json)
        assert scanresult_cve_model != False

        # Construct a model instance of ScanresultCVE by calling from_dict on the json representation
        scanresult_cve_model_dict = ScanresultCVE.from_dict(scanresult_cve_model_json).__dict__
        scanresult_cve_model2 = ScanresultCVE(**scanresult_cve_model_dict)

        # Verify the model instances are equivalent
        assert scanresult_cve_model == scanresult_cve_model2

        # Convert model instance back to dict and verify no loss of data
        scanresult_cve_model_json2 = scanresult_cve_model.to_dict()
        assert scanresult_cve_model_json2 == scanresult_cve_model_json


class TestModel_ScanresultConfigurationIssue:
    """
    Test Class for ScanresultConfigurationIssue
    """

    def test_scanresult_configuration_issue_serialization(self):
        """
        Test serialization/deserialization for ScanresultConfigurationIssue
        """

        # Construct a json representation of a ScanresultConfigurationIssue model
        scanresult_configuration_issue_model_json = {}
        scanresult_configuration_issue_model_json['corrective_action'] = 'testString'
        scanresult_configuration_issue_model_json['description'] = 'testString'
        scanresult_configuration_issue_model_json['exempt'] = True
        scanresult_configuration_issue_model_json['meta'] = {'key1': 'testString'}
        scanresult_configuration_issue_model_json['type'] = 'testString'

        # Construct a model instance of ScanresultConfigurationIssue by calling from_dict on the json representation
        scanresult_configuration_issue_model = ScanresultConfigurationIssue.from_dict(scanresult_configuration_issue_model_json)
        assert scanresult_configuration_issue_model != False

        # Construct a model instance of ScanresultConfigurationIssue by calling from_dict on the json representation
        scanresult_configuration_issue_model_dict = ScanresultConfigurationIssue.from_dict(scanresult_configuration_issue_model_json).__dict__
        scanresult_configuration_issue_model2 = ScanresultConfigurationIssue(**scanresult_configuration_issue_model_dict)

        # Verify the model instances are equivalent
        assert scanresult_configuration_issue_model == scanresult_configuration_issue_model2

        # Convert model instance back to dict and verify no loss of data
        scanresult_configuration_issue_model_json2 = scanresult_configuration_issue_model.to_dict()
        assert scanresult_configuration_issue_model_json2 == scanresult_configuration_issue_model_json


class TestModel_ScanresultPackageFixes:
    """
    Test Class for ScanresultPackageFixes
    """

    def test_scanresult_package_fixes_serialization(self):
        """
        Test serialization/deserialization for ScanresultPackageFixes
        """

        # Construct a json representation of a ScanresultPackageFixes model
        scanresult_package_fixes_model_json = {}
        scanresult_package_fixes_model_json['corrective_action'] = 'testString'
        scanresult_package_fixes_model_json['description'] = 'testString'
        scanresult_package_fixes_model_json['fix_version'] = 'testString'
        scanresult_package_fixes_model_json['installed_version'] = 'testString'
        scanresult_package_fixes_model_json['package_name'] = 'testString'

        # Construct a model instance of ScanresultPackageFixes by calling from_dict on the json representation
        scanresult_package_fixes_model = ScanresultPackageFixes.from_dict(scanresult_package_fixes_model_json)
        assert scanresult_package_fixes_model != False

        # Construct a model instance of ScanresultPackageFixes by calling from_dict on the json representation
        scanresult_package_fixes_model_dict = ScanresultPackageFixes.from_dict(scanresult_package_fixes_model_json).__dict__
        scanresult_package_fixes_model2 = ScanresultPackageFixes(**scanresult_package_fixes_model_dict)

        # Verify the model instances are equivalent
        assert scanresult_package_fixes_model == scanresult_package_fixes_model2

        # Convert model instance back to dict and verify no loss of data
        scanresult_package_fixes_model_json2 = scanresult_package_fixes_model.to_dict()
        assert scanresult_package_fixes_model_json2 == scanresult_package_fixes_model_json


class TestModel_ScanresultSecurityNotice:
    """
    Test Class for ScanresultSecurityNotice
    """

    def test_scanresult_security_notice_serialization(self):
        """
        Test serialization/deserialization for ScanresultSecurityNotice
        """

        # Construct dict forms of any model objects needed in order to build this model.

        scanresult_package_fixes_model = {}  # ScanresultPackageFixes
        scanresult_package_fixes_model['corrective_action'] = 'testString'
        scanresult_package_fixes_model['description'] = 'testString'
        scanresult_package_fixes_model['fix_version'] = 'testString'
        scanresult_package_fixes_model['installed_version'] = 'testString'
        scanresult_package_fixes_model['package_name'] = 'testString'

        # Construct a json representation of a ScanresultSecurityNotice model
        scanresult_security_notice_model_json = {}
        scanresult_security_notice_model_json['notice'] = 'testString'
        scanresult_security_notice_model_json['notice_exempt'] = True
        scanresult_security_notice_model_json['notice_id'] = 'testString'
        scanresult_security_notice_model_json['summary'] = 'testString'
        scanresult_security_notice_model_json['vulnerable_packages'] = [scanresult_package_fixes_model]

        # Construct a model instance of ScanresultSecurityNotice by calling from_dict on the json representation
        scanresult_security_notice_model = ScanresultSecurityNotice.from_dict(scanresult_security_notice_model_json)
        assert scanresult_security_notice_model != False

        # Construct a model instance of ScanresultSecurityNotice by calling from_dict on the json representation
        scanresult_security_notice_model_dict = ScanresultSecurityNotice.from_dict(scanresult_security_notice_model_json).__dict__
        scanresult_security_notice_model2 = ScanresultSecurityNotice(**scanresult_security_notice_model_dict)

        # Verify the model instances are equivalent
        assert scanresult_security_notice_model == scanresult_security_notice_model2

        # Convert model instance back to dict and verify no loss of data
        scanresult_security_notice_model_json2 = scanresult_security_notice_model.to_dict()
        assert scanresult_security_notice_model_json2 == scanresult_security_notice_model_json


# endregion
##############################################################################
# End of Model Tests
##############################################################################
