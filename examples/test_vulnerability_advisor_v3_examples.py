# -*- coding: utf-8 -*-
# (C) Copyright IBM Corp. 2021.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Examples for VulnerabilityAdvisorV3
"""

import os
import pytest
from ibm_cloud_sdk_core import ApiException, read_external_sources
from ibm_container_registry.vulnerability_advisor_v3 import *

account = 'accountID'
accept_language = 'en_US'

#
# This file provides an example of how to use the Vulnerability Advisor service.
#
# The following configuration properties are assumed to be defined:
# VULNERABILITY_ADVISOR_URL=<service base url>
# VULNERABILITY_ADVISOR_AUTH_TYPE=iam
# VULNERABILITY_ADVISOR_APIKEY=<IAM apikey>
# VULNERABILITY_ADVISOR_AUTH_URL=<IAM token service base URL - omit this if using the production environment>
#
# These configuration properties can be exported as environment variables, or stored
# in a configuration file and then:
# export IBM_CREDENTIALS_FILE=<name of configuration file>
#
config_file = 'vulnerability_advisor_v3.env'

vulnerability_advisor_service = None

config = None


##############################################################################
# Start of Examples for Service: VulnerabilityAdvisorV3
##############################################################################
# region
class TestVulnerabilityAdvisorV3Examples():
    """
    Example Test Class for VulnerabilityAdvisorV3
    """

    @classmethod
    def setup_class(cls):
        global vulnerability_advisor_service
        if os.path.exists(config_file):
            os.environ['IBM_CREDENTIALS_FILE'] = config_file

            # begin-common

            vulnerability_advisor_service = VulnerabilityAdvisorV3.new_instance(
                account=account
            )

            # end-common
            assert vulnerability_advisor_service is not None

            # Load the configuration
            global config
            config = read_external_sources(VulnerabilityAdvisorV3.DEFAULT_SERVICE_NAME)

        print('Setup complete.')

    needscredentials = pytest.mark.skipif(
        True, reason="Examples for this SDK are not intended to be runnable, skipping..."
    )

    @needscredentials
    def test_account_report_query_path_example(self):
        """
        account_report_query_path request example
        """
        try:
            # begin-accountReportQueryPath

            scan_report_list = vulnerability_advisor_service.account_report_query_path().get_result()

            print(json.dumps(scan_report_list, indent=2))

            # end-accountReportQueryPath

        except ApiException as e:
            pytest.fail(str(e))

    @needscredentials
    def test_account_status_query_path_example(self):
        """
        account_status_query_path request example
        """
        try:
            # begin-accountStatusQueryPath

            scanreport_image_summary_list = vulnerability_advisor_service.account_status_query_path().get_result()

            print(json.dumps(scanreport_image_summary_list, indent=2))

            # end-accountStatusQueryPath

        except ApiException as e:
            pytest.fail(str(e))

    @needscredentials
    def test_image_report_query_path_example(self):
        """
        image_report_query_path request example
        """
        try:
            # begin-imageReportQueryPath

            scan_report = vulnerability_advisor_service.image_report_query_path(
                name='image name'
            ).get_result()

            print(json.dumps(scan_report, indent=2))

            # end-imageReportQueryPath

        except ApiException as e:
            pytest.fail(str(e))

    @needscredentials
    def test_image_status_query_path_example(self):
        """
        image_status_query_path request example
        """
        try:
            # begin-imageStatusQueryPath

            scanreport_summary = vulnerability_advisor_service.image_status_query_path(
                name='image name'
            ).get_result()

            print(json.dumps(scanreport_summary, indent=2))

            # end-imageStatusQueryPath

        except ApiException as e:
            pytest.fail(str(e))

    @needscredentials
    def test_list_exemption_account_example(self):
        """
        list_exemption_account request example
        """
        try:
            # begin-listExemptionAccount

            list_exemption = vulnerability_advisor_service.list_exemption_account().get_result()

            print(json.dumps(list_exemption, indent=2))

            # end-listExemptionAccount

        except ApiException as e:
            pytest.fail(str(e))

    @needscredentials
    def test_get_exemption_account_example(self):
        """
        get_exemption_account request example
        """
        try:
            # begin-getExemptionAccount

            exemption = vulnerability_advisor_service.get_exemption_account(
                issue_type='cve',
                issue_id='CVE-2020-0001'
            ).get_result()

            print(json.dumps(exemption, indent=2))

            # end-getExemptionAccount

        except ApiException as e:
            pytest.fail(str(e))

    @needscredentials
    def test_create_exemption_account_example(self):
        """
        create_exemption_account request example
        """
        try:
            # begin-createExemptionAccount

            exemption = vulnerability_advisor_service.create_exemption_account(
                issue_type='cve',
                issue_id='CVE-2020-0001'
            ).get_result()

            print(json.dumps(exemption, indent=2))

            # end-createExemptionAccount

        except ApiException as e:
            pytest.fail(str(e))

    @needscredentials
    def test_list_exemption_resource_example(self):
        """
        list_exemption_resource request example
        """
        try:
            # begin-listExemptionResource

            list_exemption = vulnerability_advisor_service.list_exemption_resource(
                resource='image name'
            ).get_result()

            print(json.dumps(list_exemption, indent=2))

            # end-listExemptionResource

        except ApiException as e:
            pytest.fail(str(e))

    @needscredentials
    def test_get_exemption_resource_example(self):
        """
        get_exemption_resource request example
        """
        try:
            # begin-getExemptionResource

            exemption = vulnerability_advisor_service.get_exemption_resource(
                resource='image name',
                issue_type='cve',
                issue_id='CVE-2020-0001'
            ).get_result()

            print(json.dumps(exemption, indent=2))

            # end-getExemptionResource

        except ApiException as e:
            pytest.fail(str(e))

    @needscredentials
    def test_create_exemption_resource_example(self):
        """
        create_exemption_resource request example
        """
        try:
            # begin-createExemptionResource

            exemption = vulnerability_advisor_service.create_exemption_resource(
                resource='image name',
                issue_type='cve',
                issue_id='CVE-2020-0001'
            ).get_result()

            print(json.dumps(exemption, indent=2))

            # end-createExemptionResource

        except ApiException as e:
            pytest.fail(str(e))

    @needscredentials
    def test_exempt_handler_example(self):
        """
        exempt_handler request example
        """
        try:
            # begin-exemptHandler

            list_exemption_type_info = vulnerability_advisor_service.exempt_handler().get_result()

            print(json.dumps(list_exemption_type_info, indent=2))

            # end-exemptHandler

        except ApiException as e:
            pytest.fail(str(e))

    @needscredentials
    def test_list_account_exemptions_example(self):
        """
        list_account_exemptions request example
        """
        try:
            # begin-listAccountExemptions

            list_exemption = vulnerability_advisor_service.list_account_exemptions().get_result()

            print(json.dumps(list_exemption, indent=2))

            # end-listAccountExemptions

        except ApiException as e:
            pytest.fail(str(e))

    @needscredentials
    def test_exemptions_account_delete_handler_example(self):
        """
        exemptions_account_delete_handler request example
        """
        try:
            # begin-exemptionsAccountDeleteHandler

            exemption_deletion_info = vulnerability_advisor_service.exemptions_account_delete_handler().get_result()

            print(json.dumps(exemption_deletion_info, indent=2))

            # end-exemptionsAccountDeleteHandler

        except ApiException as e:
            pytest.fail(str(e))

    @needscredentials
    def test_list_image_exemptions_example(self):
        """
        list_image_exemptions request example
        """
        try:
            # begin-listImageExemptions

            list_exemption = vulnerability_advisor_service.list_image_exemptions(
                resource='image name'
            ).get_result()

            print(json.dumps(list_exemption, indent=2))

            # end-listImageExemptions

        except ApiException as e:
            pytest.fail(str(e))

    @needscredentials
    def test_list_bulk_image_exemptions_example(self):
        """
        list_bulk_image_exemptions request example
        """
        try:
            # begin-listBulkImageExemptions

            exemptions_map = vulnerability_advisor_service.list_bulk_image_exemptions(
                body=['image name']
            ).get_result()

            print(json.dumps(exemptions_map, indent=2))

            # end-listBulkImageExemptions

        except ApiException as e:
            pytest.fail(str(e))

    @needscredentials
    def test_delete_exemption_resource_example(self):
        """
        delete_exemption_resource request example
        """
        try:
            # begin-deleteExemptionResource

            response = vulnerability_advisor_service.delete_exemption_resource(
                resource='image name',
                issue_type='cve',
                issue_id='CVE-2020-0001'
            ).get_result()

            print(json.dumps(response, indent=2))

            # end-deleteExemptionResource

        except ApiException as e:
            pytest.fail(str(e))

    @needscredentials
    def test_delete_exemption_account_example(self):
        """
        delete_exemption_account request example
        """
        try:
            # begin-deleteExemptionAccount

            response = vulnerability_advisor_service.delete_exemption_account(
                issue_type='cve',
                issue_id='CVE-2020-0001'
            ).get_result()

            print(json.dumps(response, indent=2))

            # end-deleteExemptionAccount

        except ApiException as e:
            pytest.fail(str(e))

# endregion
##############################################################################
# End of Examples for Service: VulnerabilityAdvisorV3
##############################################################################
